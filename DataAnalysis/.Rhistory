# Import CSV data
myData <- read.csv("/Exercise_Files/02_02/exploratory-r.csv")
# Import CSV data
myData <- read.csv("~/Exercise_Files/02_02/exploratory-r.csv")
# Import CSV data
myData <- read.csv("Exercise_Files/02_02/exploratory-r.csv")
# Get a quick snapshot of the data
head(myData)
clear
hist(myData)
hist(myData$cpa)
View(myData)
# Change names of each row
row.names(myData) <- myData$keyword
head(myData)
head(myData)
# Transform data into a matrix
myDataMatrix <- data.matrix(myData)
View(myDataMatrix)
# Generate a data heatmap
heatmap(myDataMatrix, Rowv=NA, Colv=NA, scale="column")
# Generate a data heatmap
heatmap(myDataMatrix, Rowv=NA, Colv=NA, scale="column")
# Import CSV data
myData <- read.csv("Data/02_02/exploratory-r.csv")
# Import CSV data
myRegressionData <- read.csv("Data/02_02/exploratory-r.csv")
# Import CSV data
myRegressionData <- read.csv("Data/03_02/regression-r.csv")
View(myRegressionData)
# Plot data
plot(myRegressionData$BROADCAST)
# Plot data
plot(myRegressionData$BROADCAST, myRegressionData$NET.SALES)
# Visualize the line pattern
lines(myRegressionData$BROADCAST, myLinePattern$fitted)
# Fit a line into the plot pattern
myLinePattern <- lm(myRegressionData$NET.SALES ~ myRegressionData$BROADCAST)
# Visualize the line pattern
lines(myRegressionData$BROADCAST, myLinePattern$fitted)
# Assign variables to Net Sales and Broadcast
NetSales <- myRegressionData$NET.SALES
Broadcast <- myRegressionData$BROADCAST
# Fit a line into the plot pattern
#myLinePattern <- lm(myRegressionData$NET.SALES ~ myRegressionData$BROADCAST)
myLinePattern <- lm(NetSales ~ Broadcast)
# Visualize the line pattern
lines(Broadcast, myLinePattern$fitted)
# Assign variables to Net Sales and Broadcast
NetSales <- myRegressionData$NET.SALES
Broadcast <- myRegressionData$BROADCAST
# Fit a line into the plot pattern
#myLinePattern <- lm(myRegressionData$NET.SALES ~ myRegressionData$BROADCAST)
myLinePattern <- lm(NetSales ~ Broadcast)
# Visualize the line pattern
lines(Broadcast, myLinePattern$fitted)
# Assign variables to Net Sales and Broadcast
NetSales <- myRegressionData$NET.SALES
Broadcast <- myRegressionData$BROADCAST
# Plot data
plot(NetSales, Broadcast)
# Fit a line into the plot pattern
myLinePattern <- lm(NetSales ~ Broadcast)
# Visualize the line pattern
lines(Broadcast, myLinePattern$fitted)
# Visualize the line pattern
lines(Broadcast, myLinePattern$fitted)
# Assign variables to Net Sales and Broadcast
NetSales <- myRegressionData$NET.SALES
Broadcast <- myRegressionData$BROADCAST
# Plot data
plot(NetSales, Broadcast)
# Fit a line into the plot pattern
myLinePattern <- lm(NetSales ~ Broadcast)
# Visualize the line pattern
lines(Broadcast, myLinePattern$fitted)
# Visualize the line pattern
lines(Broadcast, myLinePattern$fitted)
# Plot data
plot(NetSales, Broadcast)
# Fit a line into the plot pattern
myLinePattern <- lm(NetSales ~ Broadcast)
# Visualize the line pattern
lines(NetSales, myLinePattern$fitted)
# Visualize the line pattern
lines(NetSales, myLinePattern$fitted)
# Visualize the line pattern
lines(NetSales, myLinePattern$fitted)
# Visualize the line pattern
lines(NetSales, myLinePattern$fitted)
# Import CSV data
myRegressionData <- read.csv("Data/03_02/regression-r.csv")
# Assign variables to Net Sales and Broadcast
NetSales <- myRegressionData$NET.SALES
Broadcast <- myRegressionData$BROADCAST
# Plot data
plot(NetSales, Broadcast)
# Fit a line into the plot pattern
#myLinePattern <- lm(NetSales ~ Broadcast)
# Visualize the line pattern
lines(NetSales, myLinePattern$fitted)
# Import CSV data
myRegressionData <- read.csv("Data/03_02/regression-r.csv")
# Assign variables to Net Sales and Broadcast
NetSales <- myRegressionData$NET.SALES
Broadcast <- myRegressionData$BROADCAST
# Plot data
plot(NetSales, Broadcast)
# Fit a line into the plot pattern
#myLinePattern <- lm(NetSales ~ Broadcast)
# Visualize the line pattern
lines(NetSales, myLinePattern$fitted)
# Fit a line into the plot pattern
linePattern <- lm(NetSales ~ Broadcast)
# Visualize the line pattern
lines(NetSales, linePattern$fitted)
View(myLinePattern)
View(myRegressionData)
# Fit a line into the plot pattern
linePattern <- lm(myRegressionData$NET.SALES ~ myRegressionData$BROADCAST)
# Visualize the line pattern
lines(NetSales, linePattern$fitted)
# Visualize the line pattern
lines(myRegressionData$BROADCAST, linePattern$fitted)
# Import CSV data
myRegressionData <- read.csv("Data/03_02/regression-r.csv")
# Assign variables to Net Sales and Broadcast
NetSales <- myRegressionData$NET.SALES
Broadcast <- myRegressionData$BROADCAST
# Plot data
plot(NetSales, Broadcast)
# Fit a line into the plot pattern
linePattern <- lm(myRegressionData$NET.SALES ~ myRegressionData$BROADCAST)
# Visualize the line pattern
lines(myRegressionData$BROADCAST, linePattern$fitted)
rm(myLinePattern)
# Fit a line into the plot pattern
linePattern <- lm(myRegressionData$NET.SALES ~ myRegressionData$BROADCAST)
# Visualize the line pattern
lines(myRegressionData$BROADCAST, linePattern$fitted)
View(myData)
View(linePattern)
rm(linePattern)
# Fit a line into the plot pattern
linePattern <- lm(myRegressionData$NET.SALES ~ myRegressionData$BROADCAST)
# Visualize the line pattern
lines(myRegressionData$BROADCAST, linePattern$fitted)
# Plot data
plot(NetSales, Broadcast)
rm(linePattern)
# Fit a line into the plot pattern
linePattern <- lm(NetSales ~ Broadcast)
# Visualize the line pattern
lines(Broadcast, linePattern$fitted)
rm(linePattern)
# Import CSV data
myRegressionData <- read.csv("Data/03_02/regression-r.csv")
# Assign variables to Net Sales and Broadcast
NetSales <- myRegressionData$NET.SALES
Broadcast <- myRegressionData$BROADCAST
# Plot data
plot(NetSales, Broadcast)
# Fit a line into the plot pattern
linePattern <- lm(NetSales ~ Broadcast)
# Visualize the line pattern
lines(Broadcast, linePattern$fitted)
View(myData)
# Assign variables to Net Sales and Broadcast
NetSales <- myRegressionData$NET.SALES
Broadcast <- myRegressionData$BROADCAST
# Plot data
plot(Broadcast, NetSales)
# Fit a line into the plot pattern
linePattern <- lm(NetSales ~ Broadcast)
# Visualize the line pattern
lines(Broadcast, linePattern$fitted)
#rm(linePattern)
# Visualize the line pattern
lines(Broadcast, linePattern$rank)
# Visualize the line pattern
lines(Broadcast, linePattern$fitted.values)
# Visualize the line pattern
lines(Broadcast, linePattern$fitted)
# Visualize the line pattern
lines(Broadcast, linePattern$fitted.values)
# Determine relationships (show coefficients)
linePattern$coefficients
# Import CSV data
myData <- read.csv("Data/04_02/prediction-r.csv")
View(myData)
# Import CSV data
myPredictionData <- read.csv("Data/04_02/prediction-r.csv")
# Sum classifications
remove(myData)
View(myPredictionData)
# Import CSV data
myPredictionData <- read.csv("Data/04_02/prediction-r.csv")
# Sum classifications
table(myPredictionData$sales.classification)
# Output our column names for easy reference
names(myPredictionData)
# Install tree package
install.packages('tree')
# Install tree package
install.packages('tree')
# Invoke new package
library(tree)
# Configure package to create data tree
myDecisionTree <- tree(sales.classification ~ capita + drive.by.traffic + complimentary.establishments)
# Invoke new package
library(tree)
# Install tree package
install.packages('tree')
install.packages("tree")
# Import CSV data
myPredictionData <- read.csv("Data/04_02/prediction-r.csv")
# Cast sales.classification column from "character" to "factor"
class(myPredictionData$sales.classification)
myPredictionData$sales.classification = as.factor(myPredictionData$sales.classification)
# Verify cast
class(myPredictionData$sales.classification)
# Sum classifications
table(myPredictionData$sales.classification)
# Output our column names for easy reference
names(myPredictionData)
# Install tree package
install.packages('tree')
# Invoke new package
library(tree)
# Configure package to create data tree
myDecisionTree <- tree(sales.classification ~ capita + drive.by.traffic + complimentary.establishments + competition + weather + unemployment.rate + var1 + var2 + var3, data=myPredictionData)
# Plot tree data
plot(myDecisionTree)
# Label tree data
text(myDecisionTree)
# Prune tree data
formattedTree <- prune.tree(myDecisionTree, best=3)
# Plot pruned tree
text(formattedTree)
# Plot pruned tree
text(formattedTree)
# Plot tree data
plot(myDecisionTree)
# Prune tree data
formattedTree <- prune.tree(myDecisionTree, best=3)
# Plot pruned tree
text(formattedTree)
# Plot tree data
plot(myDecisionTree)
# Prune tree data
formattedTree <- prune.tree(myDecisionTree,best=3)
# Plot pruned tree
text(formattedTree)
# Plot tree data
plot(myDecisionTree)
# Prune tree data
formattedTree <- prune.tree(myDecisionTree,best=3)
# Plot pruned tree
text(formattedTree)
# Plot and label formatted tree
plot(formattedTree)
text(formattedTree)
# Import data
myCusterData <- read.csv("Data/05_02/cluster-r.csv")
# Review cluster data
head(myCusterData)
View(myCusterData)
# Display kmeans of standardized data
ourGround <- kmeans(myClusterDataStandardized, 3)
# Standardize cluster data
# Remove first row, only leaving numerical data
myClusterDataStandardized <- scale(myClusterData[-1])
# Import data
myCusterData <- read.csv("Data/05_02/cluster-r.csv")
# Standardize cluster data
# Remove first row, only leaving numerical data
myClusterDataStandardized <- scale(myClusterData[-1])
# Standardize cluster data
# Remove first row, only leaving numerical data
class(myClusterData)
# Import data
myCusterData <- read.csv("Data/05_02/cluster-r.csv")
View(myCusterData)
# Standardize cluster data
# Remove first row, only leaving numerical data
class(myClusterData)
# Review cluster data
head(myCusterData)
remove(myCusterData)
# Import data
myClusterData <- read.csv("Data/05_02/cluster-r.csv")
# Review cluster data
head(myClusterData)
myClusterDataStandardized <- scale(myClusterData[-1])
# Display kmeans of standardized data
ourGround <- kmeans(myClusterDataStandardized, 3)
# Impost cluster package
library(cluster)
# Visualize clusters
clusplot(myClusterDataStandardized, ourGroups$cluster)
# Display kmeans of standardized data
remove(ourGround)
# Display kmeans of standardized data
ourGroups <- kmeans(myClusterDataStandardized, 3)
# Visualize clusters
clusplot(myClusterDataStandardized, ourGroups$cluster)
# Summarize data
ourGroups$size
View(myClusterData)
View(myClusterDataStandardized)
myConjointData <- read.csv("Data/06_02/conjoint-r.csv")
myConjointDataProfilesMatrix <- read.csv("Data/06_02/conjoint-r-profiles-matrix.csv")
myConjointDataLevelNames <- read.csv("Data/06_02/conjoint-r-level-names.csv")
# Import conjoint package
library(conjoint)
# Import conjoint package
install.packages("conjoint")
# Import conjoint package
library(conjoint)
# Make a data model
conjointAnalysisModel(y=myConjointData[1,], x=myConjointDataProfilesMatrix, z=myConjointDataLevelNames)
# Make a data model
caUtilities(y=myConjointData[1,], x=myConjointDataProfilesMatrix, z=myConjointDataLevelNames)
myConjointData[1,]
# Make a data model
caUtilities(y=myConjointData[2,], x=myConjointDataProfilesMatrix, z=myConjointDataLevelNames)
# Model all of our data, instead of first record only
caUtilities(y=myConjointData, x=myConjointDataProfilesMatrix, z=myConjointDataLevelNames)
# Model all of our data, instead of first record only
caUtilities(y=myConjointData, x=myConjointDataProfilesMatrix, z=myConjointDataLevelNames)
View(myConjointData)
View(myConjointDataProfilesMatrix)
